
MiniLedSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004a7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800060  00800060  000004a4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000004a7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000bb4  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000708  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004c0  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005ea  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000331  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  000026c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	12 c0       	rjmp	.+36     	; 0x3c <__vector_11>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_clear_bss>:
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	01 c0       	rjmp	.+2      	; 0x30 <.do_clear_bss_start>

0000002e <.do_clear_bss_loop>:
  2e:	1d 92       	st	X+, r1

00000030 <.do_clear_bss_start>:
  30:	af 39       	cpi	r26, 0x9F	; 159
  32:	b2 07       	cpc	r27, r18
  34:	e1 f7       	brne	.-8      	; 0x2e <.do_clear_bss_loop>
  36:	da d1       	rcall	.+948    	; 0x3ec <main>
  38:	e9 c1       	rjmp	.+978    	; 0x40c <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <__vector_11>:
#endif
writes(nearData; farData; offData)
writes(volatile)
pre(nearData.invar(); farData.invar(); offData.invar())
post(nearData.invar(); farData.invar(); offData.invar())
{
  3c:	1f 92       	push	r1
  3e:	0f 92       	push	r0
  40:	0f b6       	in	r0, 0x3f	; 63
  42:	0f 92       	push	r0
  44:	11 24       	eor	r1, r1
  46:	2f 93       	push	r18
  48:	3f 93       	push	r19
  4a:	4f 93       	push	r20
  4c:	5f 93       	push	r21
  4e:	6f 93       	push	r22
  50:	7f 93       	push	r23
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
  56:	af 93       	push	r26
  58:	bf 93       	push	r27
  5a:	ef 93       	push	r30
  5c:	ff 93       	push	r31
	uint16_t adcVal = ADC & 1023u;					// get the ADC reading from the previous conversion
  5e:	84 b1       	in	r24, 0x04	; 4
  60:	95 b1       	in	r25, 0x05	; 5
  62:	ac 01       	movw	r20, r24
  64:	53 70       	andi	r21, 0x03	; 3
	uint8_t locTickCounter = (uint8_t)tickCounter;
  66:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <tickCounter>
  6a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <tickCounter+0x1>
	while (TCNT0 < 3u * 8u) {}						// delay a little until the ADC s/h has taken effect. 3 ADC clocks should be enough, and 1 ADC clock is 8 timer 0 clocks.
  6e:	82 b7       	in	r24, 0x32	; 50
  70:	88 31       	cpi	r24, 0x18	; 24
  72:	e8 f3       	brcs	.-6      	; 0x6e <__SREG__+0x2f>
	switch(locTickCounter & 0x03u)
  74:	c9 01       	movw	r24, r18
  76:	83 70       	andi	r24, 0x03	; 3
  78:	99 27       	eor	r25, r25
  7a:	81 30       	cpi	r24, 0x01	; 1
  7c:	91 05       	cpc	r25, r1
  7e:	51 f0       	breq	.+20     	; 0x94 <__SREG__+0x55>
  80:	38 f0       	brcs	.+14     	; 0x90 <__SREG__+0x51>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	91 05       	cpc	r25, r1
  86:	59 f1       	breq	.+86     	; 0xde <__SREG__+0x9f>
  88:	03 97       	sbiw	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <__SREG__+0x4f>
  8c:	4d c0       	rjmp	.+154    	; 0x128 <__stack+0x49>
  8e:	70 c0       	rjmp	.+224    	; 0x170 <__stack+0x91>
	{
		case 0:
			// Far LED is on, we just did no reading, we are doing a far reading now and an off reading next
			PORTB &= ~BITVAL(PortBFarLedBit);		// turn far LED off
  90:	c0 98       	cbi	0x18, 0	; 24
			break;
  92:	6e c0       	rjmp	.+220    	; 0x170 <__stack+0x91>
		
		case 1:
			// LEDs are off, we just did a far reading, we are doing a off reading now and a near reading next			
			if (running)
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  98:	88 23       	and	r24, r24
  9a:	f9 f0       	breq	.+62     	; 0xda <__SREG__+0x9b>
	writes(*this; volatile)
	pre(invar())
	pre(arg <= 1023)
	post(invar())
	{
		sum = sum - readings[index] + arg;
  9c:	a9 e7       	ldi	r26, 0x79	; 121
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	50 96       	adiw	r26, 0x10	; 16
  a2:	2d 91       	ld	r18, X+
  a4:	3c 91       	ld	r19, X
  a6:	51 97       	sbiw	r26, 0x11	; 17
  a8:	52 96       	adiw	r26, 0x12	; 18
  aa:	8c 91       	ld	r24, X
  ac:	52 97       	sbiw	r26, 0x12	; 18
  ae:	e8 2f       	mov	r30, r24
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	24 0f       	add	r18, r20
  b4:	35 1f       	adc	r19, r21
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	e7 58       	subi	r30, 0x87	; 135
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	60 81       	ld	r22, Z
  c0:	71 81       	ldd	r23, Z+1	; 0x01
  c2:	26 1b       	sub	r18, r22
  c4:	37 0b       	sbc	r19, r23
  c6:	51 96       	adiw	r26, 0x11	; 17
  c8:	3c 93       	st	X, r19
  ca:	2e 93       	st	-X, r18
  cc:	50 97       	sbiw	r26, 0x10	; 16
		readings[index] = arg;
  ce:	51 83       	std	Z+1, r21	; 0x01
  d0:	40 83       	st	Z, r20
		index = static_cast<irIndex_t>((index + 1u) % cyclesAveragedIR);
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	87 70       	andi	r24, 0x07	; 7
  d6:	52 96       	adiw	r26, 0x12	; 18
  d8:	8c 93       	st	X, r24
			// LEDs are off, we just did a far reading, we are doing a off reading now and a near reading next			
			if (running)
			{
				farData.addReading(adcVal);
			}
			PORTB |= BITVAL(PortBNearLedBit);		// turn near LED on
  da:	c1 9a       	sbi	0x18, 1	; 24
			break;
  dc:	49 c0       	rjmp	.+146    	; 0x170 <__stack+0x91>
					
		case 2:
			// Near LED is on, we just did an off reading, we are doing a near reading now and a dummy off reading next
			if (running)
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e2:	88 23       	and	r24, r24
  e4:	f9 f0       	breq	.+62     	; 0x124 <__stack+0x45>
	writes(*this; volatile)
	pre(invar())
	pre(arg <= 1023)
	post(invar())
	{
		sum = sum - readings[index] + arg;
  e6:	a6 e6       	ldi	r26, 0x66	; 102
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	50 96       	adiw	r26, 0x10	; 16
  ec:	2d 91       	ld	r18, X+
  ee:	3c 91       	ld	r19, X
  f0:	51 97       	sbiw	r26, 0x11	; 17
  f2:	52 96       	adiw	r26, 0x12	; 18
  f4:	8c 91       	ld	r24, X
  f6:	52 97       	sbiw	r26, 0x12	; 18
  f8:	e8 2f       	mov	r30, r24
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	24 0f       	add	r18, r20
  fe:	35 1f       	adc	r19, r21
 100:	ee 0f       	add	r30, r30
 102:	ff 1f       	adc	r31, r31
 104:	ea 59       	subi	r30, 0x9A	; 154
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	60 81       	ld	r22, Z
 10a:	71 81       	ldd	r23, Z+1	; 0x01
 10c:	26 1b       	sub	r18, r22
 10e:	37 0b       	sbc	r19, r23
 110:	51 96       	adiw	r26, 0x11	; 17
 112:	3c 93       	st	X, r19
 114:	2e 93       	st	-X, r18
 116:	50 97       	sbiw	r26, 0x10	; 16
		readings[index] = arg;
 118:	51 83       	std	Z+1, r21	; 0x01
 11a:	40 83       	st	Z, r20
		index = static_cast<irIndex_t>((index + 1u) % cyclesAveragedIR);
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	87 70       	andi	r24, 0x07	; 7
 120:	52 96       	adiw	r26, 0x12	; 18
 122:	8c 93       	st	X, r24
			// Near LED is on, we just did an off reading, we are doing a near reading now and a dummy off reading next
			if (running)
			{
				offData.addReading(adcVal);
			}
			PORTB &= ~BITVAL(PortBNearLedBit);		// turn near LED off
 124:	c1 98       	cbi	0x18, 1	; 24
			break;
 126:	24 c0       	rjmp	.+72     	; 0x170 <__stack+0x91>

		case 3:
			// Far LED is on, we just did an off reading, we are doing another off reading now which will be discarded
			if (running)
 128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 12c:	88 23       	and	r24, r24
 12e:	f9 f0       	breq	.+62     	; 0x16e <__stack+0x8f>
	writes(*this; volatile)
	pre(invar())
	pre(arg <= 1023)
	post(invar())
	{
		sum = sum - readings[index] + arg;
 130:	ac e8       	ldi	r26, 0x8C	; 140
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	50 96       	adiw	r26, 0x10	; 16
 136:	2d 91       	ld	r18, X+
 138:	3c 91       	ld	r19, X
 13a:	51 97       	sbiw	r26, 0x11	; 17
 13c:	52 96       	adiw	r26, 0x12	; 18
 13e:	8c 91       	ld	r24, X
 140:	52 97       	sbiw	r26, 0x12	; 18
 142:	e8 2f       	mov	r30, r24
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	24 0f       	add	r18, r20
 148:	35 1f       	adc	r19, r21
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	e4 57       	subi	r30, 0x74	; 116
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	60 81       	ld	r22, Z
 154:	71 81       	ldd	r23, Z+1	; 0x01
 156:	26 1b       	sub	r18, r22
 158:	37 0b       	sbc	r19, r23
 15a:	51 96       	adiw	r26, 0x11	; 17
 15c:	3c 93       	st	X, r19
 15e:	2e 93       	st	-X, r18
 160:	50 97       	sbiw	r26, 0x10	; 16
		readings[index] = arg;
 162:	51 83       	std	Z+1, r21	; 0x01
 164:	40 83       	st	Z, r20
		index = static_cast<irIndex_t>((index + 1u) % cyclesAveragedIR);
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	87 70       	andi	r24, 0x07	; 7
 16a:	52 96       	adiw	r26, 0x12	; 18
 16c:	8c 93       	st	X, r24
			// Far LED is on, we just did an off reading, we are doing another off reading now which will be discarded
			if (running)
			{
				nearData.addReading(adcVal);
			}
			PORTB |= BITVAL(PortBFarLedBit);		// turn far LED on
 16e:	c0 9a       	sbi	0x18, 0	; 24
			break;
	}
	++tickCounter;
 170:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <tickCounter>
 174:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <tickCounter+0x1>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <tickCounter+0x1>
 17e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <tickCounter>
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_Z13CheckWatchdogv>:

// Get the tick counter from outside the ISR. As it's more than 8 bits long, we need to disable interrupts while fetching it.
inline uint16_t GetTicks()
writes(volatile)
{
	cli();
 1a4:	f8 94       	cli
	uint16_t ticks = tickCounter;
 1a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <tickCounter>
 1aa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <tickCounter+0x1>
	sei();
 1ae:	78 94       	sei

// Check whether we need to kick the watchdog
void CheckWatchdog()
writes(lastKickTicks; volatile)
{
	if (GetTicks() - lastKickTicks >= kickIntervalTicks)
 1b0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <lastKickTicks>
 1b4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <lastKickTicks+0x1>
 1b8:	82 1b       	sub	r24, r18
 1ba:	93 0b       	sbc	r25, r19
 1bc:	84 3f       	cpi	r24, 0xF4	; 244
 1be:	91 40       	sbci	r25, 0x01	; 1
 1c0:	38 f0       	brcs	.+14     	; 0x1d0 <_Z13CheckWatchdogv+0x2c>
	{
#ifndef __ECV__
		wdt_reset();											// kick the watchdog
 1c2:	a8 95       	wdr
#endif
		lastKickTicks += kickIntervalTicks;
 1c4:	2c 50       	subi	r18, 0x0C	; 12
 1c6:	3e 4f       	sbci	r19, 0xFE	; 254
 1c8:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <lastKickTicks+0x1>
 1cc:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <lastKickTicks>
 1d0:	08 95       	ret

000001d2 <_Z10DelayTicksj>:
}

// Delay for a specified number of ticks
void DelayTicks(uint16_t ticks)
writes(lastKickTicks; volatile)
{
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	8c 01       	movw	r16, r24

// Get the tick counter from outside the ISR. As it's more than 8 bits long, we need to disable interrupts while fetching it.
inline uint16_t GetTicks()
writes(volatile)
{
	cli();
 1dc:	f8 94       	cli
	uint16_t ticks = tickCounter;
 1de:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <tickCounter>
 1e2:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <tickCounter+0x1>
	sei();
 1e6:	78 94       	sei
writes(lastKickTicks; volatile)
{
	uint16_t startTicks = GetTicks();
	for (;;)
	{
		CheckWatchdog();
 1e8:	dd df       	rcall	.-70     	; 0x1a4 <_Z13CheckWatchdogv>

// Get the tick counter from outside the ISR. As it's more than 8 bits long, we need to disable interrupts while fetching it.
inline uint16_t GetTicks()
writes(volatile)
{
	cli();
 1ea:	f8 94       	cli
	uint16_t ticks = tickCounter;
 1ec:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <tickCounter>
 1f0:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <tickCounter+0x1>
	sei();
 1f4:	78 94       	sei
{
	uint16_t startTicks = GetTicks();
	for (;;)
	{
		CheckWatchdog();
		if (GetTicks() - startTicks >= ticks)
 1f6:	2c 1b       	sub	r18, r28
 1f8:	3d 0b       	sbc	r19, r29
 1fa:	20 17       	cp	r18, r16
 1fc:	31 07       	cpc	r19, r17
 1fe:	a0 f3       	brcs	.-24     	; 0x1e8 <_Z10DelayTicksj+0x16>
		{
			break;
		}
	}
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <_ZN6IrData4initEv>:
	return 0;												// to keep gcc happy
}

// Initialize the IR data structure
void IrData::init()
{
 20a:	fc 01       	movw	r30, r24
 20c:	9c 01       	movw	r18, r24
 20e:	20 5f       	subi	r18, 0xF0	; 240
 210:	3f 4f       	sbci	r19, 0xFF	; 255
	writes(i; *this; volatile)
	keep(i <= cyclesAveragedIR)
	keep(forall j in 0..(i-1) :- readings[j] == 0)
	decrease(cyclesAveragedIR - i)
	{
		readings[i] = 0;
 212:	11 92       	st	Z+, r1
 214:	11 92       	st	Z+, r1
}

// Initialize the IR data structure
void IrData::init()
{
	for (uint8_t i = 0; i < cyclesAveragedIR; ++i)
 216:	e2 17       	cp	r30, r18
 218:	f3 07       	cpc	r31, r19
 21a:	d9 f7       	brne	.-10     	; 0x212 <_ZN6IrData4initEv+0x8>
	keep(forall j in 0..(i-1) :- readings[j] == 0)
	decrease(cyclesAveragedIR - i)
	{
		readings[i] = 0;
	}
	index = 0;
 21c:	fc 01       	movw	r30, r24
 21e:	12 8a       	std	Z+18, r1	; 0x12
	sum = 0;
 220:	11 8a       	std	Z+17, r1	; 0x11
 222:	10 8a       	std	Z+16, r1	; 0x10
 224:	08 95       	ret

00000226 <_Z11runIRsensorv>:

// Run the IR sensor and the fan
void runIRsensor()
writes(running; nearData; farData; offData; lastKickTicks; digitalOutput; volatile)
{
	running = false;
 226:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	nearData.init();
 22a:	8c e8       	ldi	r24, 0x8C	; 140
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ed df       	rcall	.-38     	; 0x20a <_ZN6IrData4initEv>
	farData.init();
 230:	89 e7       	ldi	r24, 0x79	; 121
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ea df       	rcall	.-44     	; 0x20a <_ZN6IrData4initEv>
	offData.init();
 236:	86 e6       	ldi	r24, 0x66	; 102
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	e7 df       	rcall	.-50     	; 0x20a <_ZN6IrData4initEv>

	cli();
 23c:	f8 94       	cli
	// Set up timer 1 in mode 2 (CTC mode)
	GTCCR = 0;
 23e:	1c bc       	out	0x2c, r1	; 44
	TCCR0A = BITVAL(WGM01);									// no direct outputs, mode 2
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = 0;												// set the mode, clock stopped for now
 244:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0;
 246:	12 be       	out	0x32, r1	; 50
	OCR0A = baseTopIR;
 248:	8c e7       	ldi	r24, 0x7C	; 124
 24a:	89 bd       	out	0x29, r24	; 41
	OCR0B = 0;
 24c:	18 bc       	out	0x28, r1	; 40
	TIFR = BITVAL(OCF0B);									// clear any pending interrupt
 24e:	88 e0       	ldi	r24, 0x08	; 8
 250:	88 bf       	out	0x38, r24	; 56
	TIMSK = BITVAL(OCIE0B);									// enable the timer 0 compare match B interrupt
 252:	89 bf       	out	0x39, r24	; 57
	TCCR0B |= BITVAL(CS01);									// start the clock, prescaler = 8
 254:	83 b7       	in	r24, 0x33	; 51
 256:	82 60       	ori	r24, 0x02	; 2
 258:	83 bf       	out	0x33, r24	; 51
	
	ADMUX = (uint8_t)AdcPortBDuet10KOutputChan;				// select the 10K resistor output bit, single ended mode
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = BITVAL(ADEN) | BITVAL(ADPS2) | BITVAL(ADATE) | BITVAL(ADPS1);	// enable ADC, auto trigger enable, prescaler = 64 (ADC clock ~= 125kHz)
 25e:	86 ea       	ldi	r24, 0xA6	; 166
 260:	86 b9       	out	0x06, r24	; 6
	ADCSRB = BITVAL(ADTS2) | BITVAL(ADTS0);					// start conversion on timer 0 compare match B, unipolar input mode
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	83 b9       	out	0x03, r24	; 3
	tickCounter = 0;
 266:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <tickCounter+0x1>
 26a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <tickCounter>
	lastKickTicks = 0;
 26e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <lastKickTicks+0x1>
 272:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <lastKickTicks>
	sei();
 276:	78 94       	sei
// Give a G31 reading of about 0
inline void SetOutputOff()
writes(volatile)
{
	// We do this in 2 operations, each of which is atomic, so that we don't mess up what the ISR is doing with the LEDs.
	PORTB &= ~BITVAL(PortBDuet10KOutputBit);
 278:	c3 98       	cbi	0x18, 3	; 24
	PORTB &= ~BITVAL(PortBDuet12KOutputBit);
 27a:	c2 98       	cbi	0x18, 2	; 24
	// We do this by checking to see whether the connected electronics provided a pullup resistor on the output.
	// If a pullup resistor is detected, we provide a digital output, else we provide an analog output.
	// Wait a while before we do this test, so that Duet firmware has a chance to turn the internal pullup (50K to 150K) off,
	// and Arduino/RAMPS firmware has a chance to turn the internal pullup (20K to 50K) on.
	SetOutputOff();
	DDRB &= ~BITVAL(PortBDuet10KOutputBit);					// set the pin to an input, pullup disabled because output is off
 27c:	bb 98       	cbi	0x17, 3	; 23
	
	// Wait 4 seconds, keeping the watchdog happy
	DelayTicks(4u);											// ignore the readings from the first few interrupts after changing mode
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	a7 df       	rcall	.-178    	; 0x1d2 <_Z10DelayTicksj>
	running = true;											// start collecting readings
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	DelayTicks(4u * interruptFreq);							// give the printer electronics time to enable/disable its pullup resistor
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	9d e7       	ldi	r25, 0x7D	; 125
 28e:	a1 df       	rcall	.-190    	; 0x1d2 <_Z10DelayTicksj>
	running = false;										// stop collecting readings
 290:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	
	// Readings have been collected into all three of nearData, farData, and offData.
	// We are looking for a pullup resistor of no more than 75K on the output to indicate that we should use a digital output.
	// DC 2014-08-04 we now look for no more than 160K, because on the Arduino Due the pullups are in the range 50K-150K.
	digitalOutput = offData.sum + nearData.sum + farData.sum >= (3600UL * cyclesAveragedIR * 1024UL * 3u)/(160000UL + 3600UL);
 294:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <offData+0x10>
 298:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <offData+0x11>
 29c:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <nearData+0x10>
 2a0:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <nearData+0x11>
 2a4:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <farData+0x10>
 2a8:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <farData+0x11>
 2ac:	24 0f       	add	r18, r20
 2ae:	35 1f       	adc	r19, r21
 2b0:	82 0f       	add	r24, r18
 2b2:	93 1f       	adc	r25, r19
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	8c 31       	cpi	r24, 0x1C	; 28
 2b8:	92 40       	sbci	r25, 0x02	; 2
 2ba:	08 f4       	brcc	.+2      	; 0x2be <_Z11runIRsensorv+0x98>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <digitalOutput>
	
	// Change back to normal operation mode
	ADMUX = (uint8_t)AdcPhototransistorChan;				// select input 1 = phototransistor, single ended mode
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	87 b9       	out	0x07, r24	; 7
	DDRB |= BITVAL(PortBDuet10KOutputBit);					// set the pin back to being an output
 2c6:	bb 9a       	sbi	0x17, 3	; 23

	// Flash the LED twice if we are providing a digital output, four times if we are providing an analog output
	for (uint8_t flashesToGo = (digitalOutput) ? 2u : 4u; flashesToGo != 0u; )
 2c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <digitalOutput>
 2cc:	81 11       	cpse	r24, r1
 2ce:	87 c0       	rjmp	.+270    	; 0x3de <_Z11runIRsensorv+0x1b8>
 2d0:	c4 e0       	ldi	r28, 0x04	; 4
// Give a G31 reading of about 1023 indicating that the sensor is saturating
inline void SetOutputSaturated()
writes(volatile)
{
	// We do this in 2 operations, each of which is atomic, so that we don't mess up what the ISR is doing with the LEDs.
	PORTB |= BITVAL(PortBDuet10KOutputBit);
 2d2:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= BITVAL(PortBDuet12KOutputBit);
 2d4:	c2 9a       	sbi	0x18, 2	; 24

	// Flash the LED twice if we are providing a digital output, four times if we are providing an analog output
	for (uint8_t flashesToGo = (digitalOutput) ? 2u : 4u; flashesToGo != 0u; )
	{
		SetOutputSaturated();								// turn LED on
		DelayTicks(interruptFreq/4u);
 2d6:	80 ed       	ldi	r24, 0xD0	; 208
 2d8:	97 e0       	ldi	r25, 0x07	; 7
 2da:	7b df       	rcall	.-266    	; 0x1d2 <_Z10DelayTicksj>
// Give a G31 reading of about 0
inline void SetOutputOff()
writes(volatile)
{
	// We do this in 2 operations, each of which is atomic, so that we don't mess up what the ISR is doing with the LEDs.
	PORTB &= ~BITVAL(PortBDuet10KOutputBit);
 2dc:	c3 98       	cbi	0x18, 3	; 24
	PORTB &= ~BITVAL(PortBDuet12KOutputBit);
 2de:	c2 98       	cbi	0x18, 2	; 24
	for (uint8_t flashesToGo = (digitalOutput) ? 2u : 4u; flashesToGo != 0u; )
	{
		SetOutputSaturated();								// turn LED on
		DelayTicks(interruptFreq/4u);
		SetOutputOff();
		DelayTicks(interruptFreq/4u);
 2e0:	80 ed       	ldi	r24, 0xD0	; 208
 2e2:	97 e0       	ldi	r25, 0x07	; 7
 2e4:	76 df       	rcall	.-276    	; 0x1d2 <_Z10DelayTicksj>
		--flashesToGo;
 2e6:	c1 50       	subi	r28, 0x01	; 1
	// Change back to normal operation mode
	ADMUX = (uint8_t)AdcPhototransistorChan;				// select input 1 = phototransistor, single ended mode
	DDRB |= BITVAL(PortBDuet10KOutputBit);					// set the pin back to being an output

	// Flash the LED twice if we are providing a digital output, four times if we are providing an analog output
	for (uint8_t flashesToGo = (digitalOutput) ? 2u : 4u; flashesToGo != 0u; )
 2e8:	a1 f7       	brne	.-24     	; 0x2d2 <_Z11runIRsensorv+0xac>
		DelayTicks(interruptFreq/4u);
		--flashesToGo;
	}
	
	// Clear out the data and start collecting data from the phototransistor
	nearData.init();
 2ea:	8c e8       	ldi	r24, 0x8C	; 140
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	8d df       	rcall	.-230    	; 0x20a <_ZN6IrData4initEv>
	farData.init();
 2f0:	89 e7       	ldi	r24, 0x79	; 121
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	8a df       	rcall	.-236    	; 0x20a <_ZN6IrData4initEv>
	offData.init();
 2f6:	86 e6       	ldi	r24, 0x66	; 102
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	87 df       	rcall	.-242    	; 0x20a <_ZN6IrData4initEv>

	running = true;											// tell interrupt handler to collect readings
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	DelayTicks(4u * cyclesAveragedIR);						// wait until we have a full set of readings
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	65 df       	rcall	.-310    	; 0x1d2 <_Z10DelayTicksj>
	// Start normal operation
	for (;;)
	keep(nearData.invar(); farData.invar(); offData.invar())
	{
		cli();
		uint16_t locNearSum = nearData.sum;
 308:	0f 2e       	mov	r0, r31
 30a:	fc e8       	ldi	r31, 0x8C	; 140
 30c:	ef 2e       	mov	r14, r31
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ff 2e       	mov	r15, r31
 312:	f0 2d       	mov	r31, r0
		uint16_t locFarSum = farData.sum;
 314:	09 e7       	ldi	r16, 0x79	; 121
 316:	10 e0       	ldi	r17, 0x00	; 0
		uint16_t locOffSum = offData.sum;
 318:	c6 e6       	ldi	r28, 0x66	; 102
 31a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			SetOutputSaturated();							// sensor is saturating, so set the output full on to indicate this
		}
		else
		{
			locNearSum = (locNearSum > locOffSum) ? locNearSum - locOffSum : 0;
 31c:	c1 2c       	mov	r12, r1
 31e:	d1 2c       	mov	r13, r1

	// Start normal operation
	for (;;)
	keep(nearData.invar(); farData.invar(); offData.invar())
	{
		cli();
 320:	f8 94       	cli
		uint16_t locNearSum = nearData.sum;
 322:	f7 01       	movw	r30, r14
 324:	80 89       	ldd	r24, Z+16	; 0x10
 326:	91 89       	ldd	r25, Z+17	; 0x11
		uint16_t locFarSum = farData.sum;
 328:	f8 01       	movw	r30, r16
 32a:	20 89       	ldd	r18, Z+16	; 0x10
 32c:	31 89       	ldd	r19, Z+17	; 0x11
		uint16_t locOffSum = offData.sum;
 32e:	48 89       	ldd	r20, Y+16	; 0x10
 330:	59 89       	ldd	r21, Y+17	; 0x11
		sei();
 332:	78 94       	sei
			
		if (locNearSum >= saturatedThreshold || locFarSum >= saturatedThreshold)
 334:	80 33       	cpi	r24, 0x30	; 48
 336:	fb e1       	ldi	r31, 0x1B	; 27
 338:	9f 07       	cpc	r25, r31
 33a:	20 f4       	brcc	.+8      	; 0x344 <_Z11runIRsensorv+0x11e>
 33c:	20 33       	cpi	r18, 0x30	; 48
 33e:	6b e1       	ldi	r22, 0x1B	; 27
 340:	36 07       	cpc	r19, r22
 342:	18 f0       	brcs	.+6      	; 0x34a <_Z11runIRsensorv+0x124>
// Give a G31 reading of about 1023 indicating that the sensor is saturating
inline void SetOutputSaturated()
writes(volatile)
{
	// We do this in 2 operations, each of which is atomic, so that we don't mess up what the ISR is doing with the LEDs.
	PORTB |= BITVAL(PortBDuet10KOutputBit);
 344:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= BITVAL(PortBDuet12KOutputBit);
 346:	c2 9a       	sbi	0x18, 2	; 24
 348:	48 c0       	rjmp	.+144    	; 0x3da <_Z11runIRsensorv+0x1b4>
		{
			SetOutputSaturated();							// sensor is saturating, so set the output full on to indicate this
		}
		else
		{
			locNearSum = (locNearSum > locOffSum) ? locNearSum - locOffSum : 0;
 34a:	48 17       	cp	r20, r24
 34c:	59 07       	cpc	r21, r25
 34e:	18 f4       	brcc	.+6      	; 0x356 <_Z11runIRsensorv+0x130>
 350:	84 1b       	sub	r24, r20
 352:	95 0b       	sbc	r25, r21
 354:	02 c0       	rjmp	.+4      	; 0x35a <_Z11runIRsensorv+0x134>
 356:	8c 2d       	mov	r24, r12
 358:	9d 2d       	mov	r25, r13
			locFarSum = (locFarSum > locOffSum) ? locFarSum - locOffSum : 0;
 35a:	42 17       	cp	r20, r18
 35c:	53 07       	cpc	r21, r19
 35e:	d8 f5       	brcc	.+118    	; 0x3d6 <_Z11runIRsensorv+0x1b0>
 360:	24 1b       	sub	r18, r20
 362:	35 0b       	sbc	r19, r21
			
			// Differential modulated IR sensor mode								
			if (locFarSum >= farThreshold && locNearSum > locFarSum)
 364:	20 35       	cpi	r18, 0x50	; 80
 366:	31 05       	cpc	r19, r1
 368:	b0 f1       	brcs	.+108    	; 0x3d6 <_Z11runIRsensorv+0x1b0>
 36a:	28 17       	cp	r18, r24
 36c:	39 07       	cpc	r19, r25
 36e:	c8 f5       	brcc	.+114    	; 0x3e2 <_Z11runIRsensorv+0x1bc>
			{
				if (digitalOutput)
 370:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <digitalOutput>
 374:	88 23       	and	r24, r24
 376:	19 f0       	breq	.+6      	; 0x37e <_Z11runIRsensorv+0x158>
// Give a G31 reading of about 1023 indicating that the sensor is saturating
inline void SetOutputSaturated()
writes(volatile)
{
	// We do this in 2 operations, each of which is atomic, so that we don't mess up what the ISR is doing with the LEDs.
	PORTB |= BITVAL(PortBDuet10KOutputBit);
 378:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= BITVAL(PortBDuet12KOutputBit);
 37a:	c2 9a       	sbi	0x18, 2	; 24
 37c:	2e c0       	rjmp	.+92     	; 0x3da <_Z11runIRsensorv+0x1b4>
// Give a G31 reading of about 578 indicating we are at/past the trigger point
inline void SetOutputOn()
writes(volatile)
{
	// We do this in 2 operations, each of which is atomic, so that we don't mess up what the ISR is doing with the LEDs.
	PORTB |= BITVAL(PortBDuet10KOutputBit);
 37e:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~BITVAL(PortBDuet12KOutputBit);
 380:	c2 98       	cbi	0x18, 2	; 24
 382:	2b c0       	rjmp	.+86     	; 0x3da <_Z11runIRsensorv+0x1b4>
				else
				{
					SetOutputOn();					
				}
			}
			else if (!digitalOutput && locFarSum >= farThreshold && locNearSum * 6UL >= locFarSum * 5UL)
 384:	a0 e0       	ldi	r26, 0x00	; 0
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	bd 01       	movw	r22, r26
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	66 1f       	adc	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	84 0f       	add	r24, r20
 396:	95 1f       	adc	r25, r21
 398:	a6 1f       	adc	r26, r22
 39a:	b7 1f       	adc	r27, r23
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	aa 1f       	adc	r26, r26
 3a2:	bb 1f       	adc	r27, r27
 3a4:	a9 01       	movw	r20, r18
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	4a 01       	movw	r8, r20
 3ac:	5b 01       	movw	r10, r22
 3ae:	88 0c       	add	r8, r8
 3b0:	99 1c       	adc	r9, r9
 3b2:	aa 1c       	adc	r10, r10
 3b4:	bb 1c       	adc	r11, r11
 3b6:	88 0c       	add	r8, r8
 3b8:	99 1c       	adc	r9, r9
 3ba:	aa 1c       	adc	r10, r10
 3bc:	bb 1c       	adc	r11, r11
 3be:	48 0d       	add	r20, r8
 3c0:	59 1d       	adc	r21, r9
 3c2:	6a 1d       	adc	r22, r10
 3c4:	7b 1d       	adc	r23, r11
 3c6:	84 17       	cp	r24, r20
 3c8:	95 07       	cpc	r25, r21
 3ca:	a6 07       	cpc	r26, r22
 3cc:	b7 07       	cpc	r27, r23
 3ce:	18 f0       	brcs	.+6      	; 0x3d6 <_Z11runIRsensorv+0x1b0>
// Give a G31 reading of about 445 indicating we are approaching the trigger point
inline void SetOutputApproaching()
writes(volatile)
{
	// We do this in 2 operations, each of which is atomic, so that we don't mess up what the ISR is doing with the LEDs.
	PORTB &= ~BITVAL(PortBDuet10KOutputBit);
 3d0:	c3 98       	cbi	0x18, 3	; 24
	PORTB |= BITVAL(PortBDuet12KOutputBit);
 3d2:	c2 9a       	sbi	0x18, 2	; 24
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <_Z11runIRsensorv+0x1b4>
// Give a G31 reading of about 0
inline void SetOutputOff()
writes(volatile)
{
	// We do this in 2 operations, each of which is atomic, so that we don't mess up what the ISR is doing with the LEDs.
	PORTB &= ~BITVAL(PortBDuet10KOutputBit);
 3d6:	c3 98       	cbi	0x18, 3	; 24
	PORTB &= ~BITVAL(PortBDuet12KOutputBit);
 3d8:	c2 98       	cbi	0x18, 2	; 24
			{
				SetOutputOff();
			}
		}

		CheckWatchdog();	
 3da:	e4 de       	rcall	.-568    	; 0x1a4 <_Z13CheckWatchdogv>
	}
 3dc:	a1 cf       	rjmp	.-190    	; 0x320 <_Z11runIRsensorv+0xfa>
	// Change back to normal operation mode
	ADMUX = (uint8_t)AdcPhototransistorChan;				// select input 1 = phototransistor, single ended mode
	DDRB |= BITVAL(PortBDuet10KOutputBit);					// set the pin back to being an output

	// Flash the LED twice if we are providing a digital output, four times if we are providing an analog output
	for (uint8_t flashesToGo = (digitalOutput) ? 2u : 4u; flashesToGo != 0u; )
 3de:	c2 e0       	ldi	r28, 0x02	; 2
 3e0:	78 cf       	rjmp	.-272    	; 0x2d2 <_Z11runIRsensorv+0xac>
				else
				{
					SetOutputOn();					
				}
			}
			else if (!digitalOutput && locFarSum >= farThreshold && locNearSum * 6UL >= locFarSum * 5UL)
 3e2:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <digitalOutput>
 3e6:	41 11       	cpse	r20, r1
 3e8:	f6 cf       	rjmp	.-20     	; 0x3d6 <_Z11runIRsensorv+0x1b0>
 3ea:	cc cf       	rjmp	.-104    	; 0x384 <_Z11runIRsensorv+0x15e>

000003ec <main>:
writes(volatile)
writes(running; digitalOutput)
writes(nearData; farData; offData)	// IR variables
writes(lastKickTicks)
{
	cli();
 3ec:	f8 94       	cli
	DIDR0 = BITVAL(AdcPhototransistorChan);					// disable digital input buffers on ADC pins
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	84 bb       	out	0x14, r24	; 20

	// Set ports and pullup resistors
	PORTB = PortBUnusedBitMask;								// enable pullup on unused I/O pins
 3f2:	18 ba       	out	0x18, r1	; 24
	
	// Enable outputs
	DDRB = BITVAL(PortBNearLedBit) | BITVAL(PortBFarLedBit) | BITVAL(PortBDuet10KOutputBit) | BITVAL(PortBDuet12KOutputBit);
 3f4:	8f e0       	ldi	r24, 0x0F	; 15
 3f6:	87 bb       	out	0x17, r24	; 23
	
	sei();
 3f8:	78 94       	sei
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 3fa:	9d e0       	ldi	r25, 0x0D	; 13
 3fc:	88 e1       	ldi	r24, 0x18	; 24
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	a8 95       	wdr
 404:	81 bd       	out	0x21, r24	; 33
 406:	0f be       	out	0x3f, r0	; 63
 408:	91 bd       	out	0x21, r25	; 33

#ifndef __ECV__												// eCv++ doesn't understand gcc assembler syntax
	wdt_enable(WDTO_500MS);									// enable the watchdog (we kick it when checking the fan)	
#endif
		
	runIRsensor();											// doesn't return
 40a:	0d df       	rcall	.-486    	; 0x226 <_Z11runIRsensorv>

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
